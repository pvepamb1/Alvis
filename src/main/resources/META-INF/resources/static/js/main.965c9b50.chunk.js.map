{"version":3,"sources":["components/Home/Home.js","components/User/User.js","components/Register/Register.js","components/Device/Device.js","serviceWorker.js","index.js","components/App/App.js"],"names":["Home","React","Component","react_default","a","createElement","className","href","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","Switch","Route","exact","path","component","Redirect","to","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8XAqBeA,SCjBIC,IAAMC,iMDEjB,OACCC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAQH,EAAAC,EAAAC,cAAA,iBAArB,OAAuCF,EAAAC,EAAAC,cAAA,iBAAvC,cAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,6BAA6BD,UAAU,UAA/C,iBACAH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,iCAAiCD,UAAU,UAAnD,mBACAH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,gCAAgCD,UAAU,UAAlD,+BAVEL,IAAMC,qBEAFD,IAAMC,oCCDRD,IAAMC,iBCSPM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACLX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACIZ,EAAAC,EAAAC,cCAW,WAEf,OACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACIb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,iEAAiEC,UAAWpB,IAC9FG,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,8DACdhB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAUC,GAAG,uEDPzB,OAEJC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.965c9b50.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Home.css';\r\n\r\n\r\nclass Home extends React.Component {\r\n    render() {\r\n        return (\r\n         <div>\r\n             <div className=\"home_container\">\r\n                 <p className=\"title\"><span>H</span>ome <span>A</span>utomation</p>\r\n             </div>\r\n             <div className=\"options\">\r\n                 <a href=\"http://localhost:3000/user\" className=\"button\">Register User</a>\r\n                 <a href=\"http://localhost:3000/register\" className=\"button\">Register Device</a>\r\n                 <a href=\"http://localhost:3000/devices\" className=\"button\">Registered Devices</a>\r\n             </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport axios from 'axios';\r\nimport './User.css';\r\n\r\nclass User extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.url = props.url;\r\n        this.state = {name:'', email:'', password:'', success:''};\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    async handleSubmit(event){\r\n        event.preventDefault();\r\n        await axios.post(this.url + \"/save\", this.state);\r\n        this.setState({name:'', email:'', password:'', success:'Successfully submitted'});\r\n    }\r\n\r\n\r\n    handleChange(event){\r\n        this.setState({[event.target.name]:event.target.value});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-25\">\r\n                            <label for=\"name\"> Name </label>\r\n                        </div>\r\n                        <div className=\"col-75\">\r\n                            <input id=\"name\" name = \"name\" type=\"text\" placeholder=\"Your name..\" value={this.state.name} onChange={this.handleChange}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-25\">\r\n                            <label for=\"email\"> Email </label>\r\n                        </div>\r\n                        <div className=\"col-75\">\r\n                            <input id=\"email\" name = \"email\" type=\"text\" placeholder=\"Your email..\" value={this.state.email} onChange={this.handleChange}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-25\">\r\n                            <label for=\"password\"> Email Password </label>\r\n                        </div>\r\n                        <div className=\"col-75\">\r\n                            <input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Your email password..\" value={this.state.password} onChange={this.handleChange}/>\r\n                        </div>\r\n                    </div>\r\n                    <input type=\"submit\" value=\"Submit\"/>\r\n                </form>\r\n                <br/>\r\n                <div>{this.state.success}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport axios from 'axios';\r\nimport './Register.css';\r\n\r\nclass Register extends React.Component {\r\n\r\n    constructor(props){\r\n        super();\r\n        this.url = props.url;\r\n        this.state = {sensors:<tr></tr>, final:[]};\r\n        this.handleRefresh = this.handleRefresh.bind(this);\r\n        this.handleChangeSelect = this.handleChangeSelect.bind(this);\r\n        this.submitValues = this.submitValues.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    async handleRefresh(event){\r\n        event.preventDefault();\r\n        let sensorData = await axios.get(this.url + \"sensors/unmapped\");\r\n        let types = await axios.get(this.url + \"/sensors/types\");\r\n        let options = types.data.map((obj,index) =>(<option value={obj} key={index}>{obj}</option>));\r\n        let sensorValues = [];\r\n        for(let val of sensorData.data){\r\n            let id = val.id.id;\r\n            let mac = val.id.address.mac;\r\n            sensorValues.push(\r\n                <tr key={mac}>\r\n                    <td>{id}</td>\r\n                    <td>{mac}</td>\r\n                    <td>\r\n                        <select onChange={(e) => this.handleChangeSelect(e, val)} name=\"types\">{options}\r\n                        </select>\r\n                    </td>\r\n                    <td>\r\n                        <input type=\"text\" id=\"alias\" name=\"alias\" onChange={(e) => this.handleChange(e, val)}/>\r\n                    </td>\r\n                </tr>)\r\n        }\r\n        this.setState({sensors:sensorValues});\r\n    }\r\n\r\n    handleChange(event, val){\r\n        this.setState({[event.target.name]:event.target.value});\r\n        val.alias = event.target.value;\r\n    }\r\n\r\n    handleChangeSelect(e, val){\r\n        val.type = e.target.value;\r\n        if(!this.state.final.includes(val))\r\n            this.state.final.push(val);\r\n    }\r\n\r\n    async submitValues(){\r\n           await axios.put(this.url + '/sensors/', this.state.final);\r\n           this.setState({sensors:<tr></tr>});\r\n    }\r\n\r\n    render(){\r\n     return(\r\n         <div>\r\n             <div>\r\n                 <table id=\"results\">\r\n                     <tbody>\r\n                     <tr>\r\n                         <th>Sensor ID</th>\r\n                         <th>MAC Address</th>\r\n                         <th>Sensor Type</th>\r\n                         <th>Alias</th>\r\n                     </tr>\r\n                     {this.state.sensors}\r\n                     </tbody>\r\n                 </table>\r\n             </div>\r\n             <input className=\"button\" id=\"refresh\" type=\"button\" value=\"Refresh\" onClick={this.handleRefresh}/>\r\n             <input className=\"button\" id=\"submit\" type=\"button\" value=\"Submit\" onClick={this.submitValues}/>\r\n         </div>\r\n     );\r\n    }\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Device extends React.Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.url = props.url;\r\n        this.state = {sensors: <tr></tr>, res:''};\r\n        this.handleRefresh = this.handleRefresh.bind(this);\r\n    }\r\n\r\n    async handleRefresh(event){\r\n        event.preventDefault();\r\n        let sensorData = await axios.get(this.url + \"/sensors/\");\r\n        let sensorValues = [];\r\n        for(let val of sensorData.data){\r\n            sensorValues.push(\r\n                <tr key={val}>\r\n                    <td>\r\n                        <a href={`${this.url}/sensors/${val.alias}`} className=\"button\">{val.alias}</a>\r\n                    </td>\r\n                </tr>)\r\n        }\r\n        this.setState({sensors:sensorValues});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <table>\r\n                    <tbody>{this.state.sensors}</tbody>\r\n                </table>\r\n                <input className=\"button\" id=\"refresh\" type=\"button\" value=\"Refresh\" onClick={this.handleRefresh}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Device;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './components/App/App';\r\nimport {BrowserRouter as Router} from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();","import React from 'react';\r\nimport '../../css/App.css';\r\nimport User from '../User/User'\r\nimport Home from '../Home/Home';\r\nimport Register from '../Register/Register';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport Device from \"../Device/Device\";\r\n\r\n\r\nexport const App = () => {\r\n    let url = \"http://192.168.1.200:8080\";\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route exact path=\"C:/Users/Prasenna/WebstormProjects/homunculus-react/build/home\" component={Home}/>\r\n                <Route exact path=\"C:/Users/Prasenna/WebstormProjects/homunculus-react/build/\">\r\n                    <Redirect to=\"C:/Users/Prasenna/WebstormProjects/homunculus-react/build/home\"/>\r\n                </Route>\r\n                {/*<Route exact path=\"/register\" render={(props) => <Register url={url} {...props}/>}/>\r\n                <Route exact path=\"/user\" render={(props) => <User url={url} {...props}/>}/>\r\n                <Route exact path=\"/devices\" render={(props) => <Device url={url} {...props}/>}/>*/}\r\n            </Switch>\r\n        </div>\r\n    );\r\n};"],"sourceRoot":""}